import com.lexer.Lexer;
import com.lexer.Token;


public class myclass implements functions{

    public static int count = 0;
    private final float pi = 3.14;

    public myclass myclass(int count){
        count = count;
    }

    public float parse(Parser par){
        return 3.55;
    }

    //public int sum(){
        //return 0;
    //}

    public abstract void function(float u, int m){
        float k = 1.3;
        char gdf = 'f';
        u = 4.4;
        count = 8;
        int stam = 13;
        int yo = 0;
        int y = function2(count,stam);
        myclass x = new myclass(x,Y);
        int X = (y + 10) - 20;
        while(x < 20){
            y = (x == 10)? 5 : 8;
        }
    }

    public int function2(int x = 0, int y){
        if( y == 10){
         x = 10;
        } else{
            boolean b = true;
        }
        function(9.7,x);

        x = ++y;
        return 0 + 6;
    }

    public void no(){

    }

}

interface functions extends ha{
    public float parse(Parser par);
    public int sum(){
        return 0;
    }
}

interface he{
    public void no();
}

interface ha extends he{
    public void yes(){

    }
}




